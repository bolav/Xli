#!/bin/bash

while getopts ":hcdrit:p:-:" opt; do

	if [ "$opt" == "-" ]; then 
		# FIXME: Hardcoded indices
		if [ "${OPTARG:6:1}" == "=" ]; then  
			opt=${OPTARG:0:6}
			OPTARG=${OPTARG:7}
		else
			opt=$OPTARG
			OPTARG=""
		fi
	fi

	case $opt in 
	h|help) 
		HELP=1
		;;
	c|clean)
		CLEAN=1
		;;
	d|debug)
		DEBUG=1
		;;
	r|release)
		DEBUG=0
		;;
	i|install)
		INSTALL=1
		;;
	t|target)
		TARGET=$OPTARG
		;;
	p|prefix)
		INSTALL_PREFIX=$OPTARG
		;;
	*) 
		echo "ERROR: Invalid option --$opt.\n\nType 'cmakemake --help' for usage." >&2
		exit 1 
		;;
	esac
done

shift $((OPTIND-1))

PROJECT="$@"

#echo "'$DEBUG' '$INSTALL' '$TARGET' '$INSTALL_PREFIX' '$PROJECT'" && exit 0

if [[ "$HELP" == "1" || -z "$PROJECT" ]]; then
	cat <<E0
Usage: cmakemake [--debug|--release] [--install] [--prefix=<path>] <project-dir>
   or: cmakemake --target=xcode <project-dir>
   or: cmakemake --clean <project-dir>

Build script for CMake projects.

This command wraps 'cmake && make', but with some additional features:
  - Optimized release build by default, unless --debug or DEBUG=1
  - Out of source builds with debug and release built to separate folders
  - Paralell builds out of the box
  - Xcode batch builds (OS X only)

Additional arguments to cmake can be passed using environment variable CMAKE_ARGS.
E0
	exit 0
fi

set -e
cd "$PROJECT"

if [ "$CLEAN" == "1" ]; then
	for dir in "build/cmake-release" "build/cmake-debug"; do
		if [ -f "$dir/Makefile" ]; then
			cd "$dir"
			make clean
			cd -
		fi
	done

	rm -rf build/cmake-*
	exit 0
fi

if [ !`which cmake` ]; then
	# This is sometimes needed when run from GUI applications on OS X
	PATH=$PATH:/opt/local/bin
fi

if [ -n "$TARGET" ]; then
	case $TARGET in
	xcode)
		mkdir -p build/cmake-xcode
		cd build/cmake-xcode

		cmake ../.. -GXcode $CMAKE_ARGS	
		xcodebuild -alltargets -configuration Debug
		xcodebuild -alltargets -configuration Release

		exit 0
		;;
	*)
		echo "ERROR: Invalid target '$TARGET'.\n\nType 'cmakemake --help' for usage." >&2
		exit 1
		;;
	esac
fi

if [ -f /proc/cpuinfo ]; then
	CPU_COUNT=`grep processor /proc/cpuinfo | wc -l`
elif [ `uname` = "Darwin" ]; then
	CPU_COUNT=`sysctl hw.ncpu | cut -d " " -f 2`
else
	CPU_COUNT=1
fi

if [ "$DEBUG" == "1" ]; then
	BUILD_DIR="build/cmake-debug"
	CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Debug"
else
	BUILD_DIR="build/cmake-release"
	CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Release"
fi

if [ -n "$INSTALL_PREFIX" ]; then
	CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX"
fi

mkdir -p $BUILD_DIR
cd $BUILD_DIR

rm -f CMakeCache.txt

cmake ../.. $CMAKE_ARGS
make -j $CPU_COUNT

if [ "$INSTALL" == "1" ]; then
	make install
fi
