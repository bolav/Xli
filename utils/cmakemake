#!/bin/sh

while getopts ":hcdritp:-:" opt; do 
	if [ "$opt" == "-" ]; then 
		opt=$OPTARG 
	fi; 

	case $opt in 
	h|help) 
		HELP=1
		;;
	c|clean)
		CLEAN=1
		;;
	d|debug)
		DEBUG=1
		;;
	r|release)
		DEBUG=0
		;;
	i|install)
		INSTALL=1
		;;
	t)
		TARGET=$OPTARG
		;;
	target=*)
		TARGET=${opt:7}
		;;
	p)
		INSTALL_PREFIX=$OPTARG
		;;
	prefix=*)
		INSTALL_PREFIX=${opt:7}
		;;
	*) 
		echo "ERROR: Invalid option -$OPTARG.\n\nType 'cmakemake --help' for usage." >&2
		exit 1 
		;;
	esac
done 

if [ $HELP ]; then
	cat <<E0
Usage: cmakemake [--debug|--release] [--install] <project-path>
       cmakemake --target=xcode <project-path>
       cmakemake --clean <project-path>

Build script for CMake projects.

This command wraps 'cmake && make', but with some additional features:
  - Optimized release build by default, unless --debug or DEBUG=1
  - Out of source builds with debug and release built to separate folders
  - Paralell builds out of the box
  - Xcode batch builds (OS X only)

Additional arguments to cmake can be passed using environment variable CMAKE_ARGS.
E0
	exit 0
fi

shift $((OPTIND-1))

PROJECT="$@"

if [ -z "$PROJECT" ]; then
	echo "ERROR: No project path was specified"
	exit 1
fi

#echo "'$DEBUG' '$INSTALL' '$TARGET' '$PROJECT'" && exit 0

set -e
cd "$PROJECT"

if [ "$CLEAN" == "1" ]; then
	rm -rf build/cmake-*
	exit 0
fi

if [ $TARGET ]; then
	case $TARGET in
	xcode)
		mkdir -p build/cmake-xcode
		cd build/cmake-xcode

		cmake ../.. -GXcode
		xcodebuild -alltargets -configuration Debug
		xcodebuild -alltargets -configuration Release

		exit 0
		;;
	*)
		echo "ERROR: Invalid target '$TARGET'.\n\nType 'cmakemake --help' for usage." >&2
		exit 1
		;;
	esac
fi

if [ -f /proc/cpuinfo ]; then
	CPU_COUNT=`grep processor /proc/cpuinfo | wc -l`
elif [ `uname` = "Darwin" ]; then
	CPU_COUNT=`sysctl hw.ncpu | cut -d " " -f 2`
else
	CPU_COUNT=1
fi

if [ "$DEBUG" == "1" ]; then
	BUILD_DIR="build/cmake-debug"
	CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Debug"
else
	BUILD_DIR="build/cmake-release"
	CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Release"
fi

if [ $INSTALL_PREFIX ]; then
	CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX"
fi

mkdir -p $BUILD_DIR
cd $BUILD_DIR

rm -f CMakeCache.txt

cmake ../.. $CMAKE_ARGS
make -j $CPU_COUNT

if [ "$INSTALL" == "1" ]; then
	make install
fi
