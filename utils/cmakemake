#!/bin/bash

# TODO: Get rid of getopts, does not work very well
while getopts ":h?j:D:U:-:" opt; do

    if [ "$opt" == "-" ]; then 
        # FIXME: Hardcoded indices
        if [ "${OPTARG:6:1}" == "=" ]; then  
            opt=${OPTARG:0:6}
            OPTARG=${OPTARG:7}
        elif [ "${OPTARG:5:1}" == "=" ]; then  
            opt=${OPTARG:0:5}
            OPTARG=${OPTARG:6}
        elif [ "${OPTARG:4:1}" == "=" ]; then  
            opt=${OPTARG:0:4}
            OPTARG=${OPTARG:5}
        else
            opt=$OPTARG
            OPTARG=""
        fi
    fi

    case $opt in 
    h|?|help) 
        HELP=1
        ;;
    clean)
        CLEAN=1
        ;;
    debug)
        DEBUG=1
        ;;
    release)
        DEBUG=0
        ;;
    install)
        INSTALL=1
        ;;
    target)
        TARGET=$OPTARG
        ;;
    prefix)
        INSTALL_PREFIX=$OPTARG
        ;;
    j|jobs)
        JOB_COUNT=$OPTARG
        ;;
    D|define)
        DEFINES="$DEFINES -D$OPTARG"
        ;;
    U|undef)
        DEFINES="$DEFINES -U$OPTARG"
        ;;
    no-build)
        NO_BUILD=1
        ;;
    *) 
        echo -e "ERROR: Invalid option --$opt.\n\nType 'cmakemake --help' for usage." >&2
        exit 1 
        ;;
    esac
done

shift $((OPTIND-1))

PROJECT="$@"

#echo "'$DEBUG' '$INSTALL' '$TARGET' '$INSTALL_PREFIX' '$JOB_COUNT' '$DEFINES' '$NO_BUILD' '$PROJECT'" && exit 1

if [[ "$HELP" == "1" || -z "$PROJECT" ]]; then
    cat <<E0
Usage: cmakemake [--debug|--release] [--install] [--prefix=<path>] [--jobs=<cpu-cores>] <project-dir>
   or: cmakemake --target=xcode [--no-build|--debug] <project-dir>
   or: cmakemake --clean <project-dir>

Build script for CMake projects.

This command wraps 'cmake && make' with some additional features:
  - Optimized release build by default, unless --debug or DEBUG=1
  - Out of source builds with debug and release built to separate folders
  - Paralell builds out of the box
  - Xcode batch builds (OS X only)
  - MSYS builds (Windows only)

Additional arguments to cmake can be passed using environment variable CMAKE_ARGS.
E0
    exit 0
fi

set -e
cd "$PROJECT"

if [ "$CLEAN" == "1" ]; then
    for dir in "build/cmake-release" "build/cmake-debug"; do
        if [ -f "$dir/Makefile" ]; then
            cd "$dir"
            make clean
            cd "$OLDPWD"
        fi
    done

    rm -rfv build/cmake-*
    exit 0
fi

if [ ! `which cmake` ]; then
    # This is sometimes needed when run from GUI applications on OS X
    PATH=$PATH:/opt/local/bin

    if [ ! `which cmake` ]; then
        echo "ERROR: Unable to find the 'cmake' command. Make sure cmake is installed and added to \$PATH."
        exit 1
    fi
fi

if [ -n "$TARGET" ]; then
    case $TARGET in
    xcode)
        mkdir -p build/cmake-xcode
        cd build/cmake-xcode

        cmake ../.. -GXcode $CMAKE_ARGS

        if [ "$NO_BUILD" != "1" ]; then
            if [[ -z "$DEBUG" || "$DEBUG" == "1" ]]; then
                xcodebuild -alltargets -configuration Debug
            fi

            if [[ -z "$DEBUG" || "$DEBUG" == "0" ]]; then
                xcodebuild -alltargets -configuration Release
            fi
        fi

        exit 0
        ;;
    *)
        echo -e "ERROR: Invalid target '$TARGET'.\n\nType 'cmakemake --help' for usage." >&2
        exit 1
        ;;
    esac
fi

if [ -z "$JOB_COUNT" ]; then
    if [ -f /proc/cpuinfo ]; then
        JOB_COUNT=`grep processor /proc/cpuinfo | wc -l`
    elif [ `uname` = "Darwin" ]; then
        JOB_COUNT=`sysctl hw.ncpu | cut -d " " -f 2`
    elif [ -n "$NUMBER_OF_PROCESSORS" ]; then
        JOB_COUNT=$NUMBER_OF_PROCESSORS
    else
        JOB_COUNT=1 
    fi
fi

if [ "$DEBUG" == "1" ]; then
    BUILD_DIR="build/cmake-debug"
    CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Debug"
else
    BUILD_DIR="build/cmake-release"
    CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Release"
fi

if [ -n "$INSTALL_PREFIX" ]; then
    CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX"
fi

if [ -n "$DEFINES" ]; then
    CMAKE_ARGS="$CMAKE_ARGS $DEFINES"
fi

mkdir -p $BUILD_DIR
cd $BUILD_DIR

#rm -f CMakeCache.txt

if [ $OSTYPE = "msys"  ]; then
    export CMAKE_ARGS="$CMAKE_ARGS -G\"MSYS Makefiles"
    cmd "/C cmake ../.. %CMAKE_ARGS%"
else
    cmake ../.. $CMAKE_ARGS
fi

make -j $JOB_COUNT

if [ "$INSTALL" == "1" ]; then
    make install
fi
