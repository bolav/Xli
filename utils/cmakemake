#!/bin/sh
set -e

case $1 in
install)
    DO_INSTALL=1
    shift
    ;;
esac

while [ $# -gt 0 ]; do
    OPT=$1

    case $OPT in
    -j|-D|-U|-G)
        shift
        OPT="$OPT$1"
        ;;
    esac

    case $OPT in 
    -h|-\?|--help)
        cat <<E0
Usage: cmakemake [<build-options>] <project-dir>
  or   cmakemake install [--debug] <project-dir>

Build options:

  --debug               Debug build
  --release             Release build (default)
  --no-build            Generate project, but don't build
  --platform=<name>     Build for another platform (see below)
  --prefix=<path>       Set install prefix
  -j<cpu-count>         Set compiler job count
  -D<variable>=<value>  Define a cmake variable
  -U<variable>          Undefine a cmake variable
  -G<generator>         Use a cmake generator

Supported platforms:

  * Android             Build Android binaries (armeabi-v7a) (MSYS, Linux, OS X)
  * iOS                 Build iOS binaries (iphoneos+simulator) (OS X only)
  * Xcode               Build using Xcode (debug+release) (OS X only)


Build script for CMake projects.

This command wraps 'cmake && make' with some additional features:
  - Optimized release build by default, unless --debug or DEBUG=1
  - Out of source builds with debug and release built to separate folders
  - Paralell builds out of the box
  - Xcode batch builds (OS X only)
  - MSYS support (Windows only)
  - iOS + Android cross builds

Additional arguments to cmake can be passed using environment variable CMAKE_ARGS.
E0
        exit 1
        ;;
    --debug)
        DEBUG=1
        ;;
    --release)
        DEBUG=0
        ;;
    --no-build)
        DO_BUILD=0
        ;;
    --platform=*)
        PLATFORM=`echo ${OPT:11} | tr '[:upper:]' '[:lower:]'`
        ;;
    --prefix=*)
        CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=${OPT:9}"
        ;;
    -D*|-U*|-G*)
        CMAKE_ARGS="$CMAKE_ARGS -${OPT:1}"
        ;;
    -j*)
        JOB_COUNT="${OPT:2}"
        ;;
    --)
        shift
        break
        ;;
    *)
        if [ $# -eq 1 ]; then
            break
        else
            echo "ERROR: Unable to parse arguments '$@'\n\nType \`cmakemake --help\` for usage." >&2
            exit 1
        fi
        ;;
    esac

    shift
done

PROJECT_DIR="$@"

#echo "'$DO_INSTALL' '$DO_CLEAN' '$DO_BUILD' '$DEBUG' '$TARGET' '$JOB_COUNT' '$CMAKE_ARGS' '$PROJECT_DIR'" && exit 1

if [ -z "$PROJECT_DIR" ]; then
    echo "ERROR: No project directory specified.\n\nType \`cmakemake --help\` for usage." >&2
    exit 1
fi

cd "$PROJECT_DIR"
PROJECT_DIR=`pwd -P` # Absolute path

cd "`dirname "$0"`/.."
XLI_DIR=`pwd -P`

cd "$PROJECT_DIR"

if [ "$DEBUG" = "1" ]; then
    BUILD_TYPE="Debug"
else
    BUILD_TYPE="Release"
fi

BUILD_DIR="build/$BUILD_TYPE"
CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE=$BUILD_TYPE"

if [ "$DO_INSTALL" = "1" ]; then
    cd "$BUILD_DIR"
    make install
    exit 0
fi

if ! which cmake > /dev/null 2>&1; then
    # This is sometimes needed when run from GUI applications on OS X
    PATH=$PATH:/opt/local/bin

    if ! which cmake > /dev/null 2>&1; then
        echo "ERROR: Unable to find the \`cmake\` command. Make sure cmake is installed and added to \$PATH." >&2
        exit 1
    fi
fi

if [ -z "$JOB_COUNT" ]; then
    if [ -f /proc/cpuinfo ]; then
        JOB_COUNT=`grep processor /proc/cpuinfo | wc -l`
    elif [ "`uname`" = "Darwin" ]; then
        JOB_COUNT=`sysctl hw.ncpu | cut -d " " -f 2`
    elif [ -n "$NUMBER_OF_PROCESSORS" ]; then
        JOB_COUNT=$NUMBER_OF_PROCESSORS
    else
        JOB_COUNT=1 
    fi
fi

if [ "$DO_BUILD" != "0" ]; then
    case $DEBUG in
    0)
        CONFIGS="Release"
        ;;
    1)
        CONFIGS="Debug"
        ;;
    *)
        CONFIGS="Release Debug"
        ;;
    esac
else
    CONFIGS=""
fi

if [ -n "$PLATFORM" ]; then
    case $PLATFORM in
    xcode)
        mkdir -p build/Xcode
        cd build/Xcode

        cmake ../.. -GXcode $CMAKE_ARGS

        for cfg in $CONFIGS; do
            xcodebuild -alltargets -configuration "$cfg"
        done
        ;;
    ios)
        set -- ../../.. $CMAKE_ARGS -GXcode -DCMAKE_TOOLCHAIN_FILE="$XLI_DIR/cmake/toolchain/iOS.cmake"

        for arch in OS SIMULATOR; do
            mkdir -p "build/iOS/$arch"
            cd "build/iOS/$arch"

            cmake "$@" -DIOS_PLATFORM="$arch"

            for cfg in $CONFIGS; do
                xcodebuild -alltargets -configuration "$cfg"
            done

            cd "$PROJECT_DIR"
        done
        ;;
    android)
        NDK_FILENAME=`which ndk-build`
        NDK_DIR=`dirname "$NDK_FILENAME"`
        NDK_ABI="armeabi-v7a"
        TOOLCHAIN_FILE="$XLI_DIR/cmake/toolchain/android.toolchain.cmake"
        BUILD_DIR="build/android/$BUILD_TYPE-$NDK_ABI"

        mkdir -p "$BUILD_DIR"
        cd "$BUILD_DIR"

        if [ "$OSTYPE" = "msys" ]; then
            # TODO: Try to replace this stuff with `cmake --build .`
            if [ -d "$NDK_DIR/prebuilt/windows-x86_64/bin" ]; then
                MAKE_DIR="$NDK_DIR/prebuilt/windows-x86_64/bin"
            else
                MAKE_DIR="$NDK_DIR/prebuilt/windows-x86_32/bin"
            fi

            CMAKE_FILENAME=`which cmake`
            CMAKE_DIR=`dirname "$CMAKE_FILENAME"`
            PATH="$CMAKE_DIR:$MAKE_DIR"
            set -- -G"MinGW Makefiles"
        fi

        set -- -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" "$@"
        set -- -DANDROID_NDK="$NDK_DIR" -DANDROID_ABI="$NDK_ABI" "$@"
        set -- -DANDROID_NATIVE_API_LEVEL="android-9" -DANDROID_STL="stlport_static" "$@"

        cmake "$@" $CMAKE_ARGS ../../..

        if [ "$DO_BUILD" != "0" ]; then
            cmake --build . --use-stderr -- -j "$JOB_COUNT"
        fi
        ;;
    *)
        echo "ERROR: Invalid platform '$PLATFORM'.\n\nType \`cmakemake --help\` for usage." >&2
        exit 1
        ;;
    esac
else
    mkdir -p "$BUILD_DIR"
    cd "$BUILD_DIR"

    if [ "$OSTYPE" = "msys" ]; then
        export CMAKE_ARGS="$CMAKE_ARGS -G\"MSYS Makefiles"
        cmd "/C cmake ../.. %CMAKE_ARGS%"
    else
        cmake ../.. $CMAKE_ARGS
    fi

    if [ "$DO_BUILD" != "0" ]; then
        cmake --build . --use-stderr -- -j "$JOB_COUNT"
    fi
fi
